package com.people.bootcamp.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.people.bootcamp.controller.TrailController;
import com.people.bootcamp.repository.model.TrailModel;
import com.people.bootcamp.service.domain.Content;
import com.people.bootcamp.service.domain.Trail;

public class TrailControllerTest {

	TrailService trailService = mock(TrailService.class);
	TrailController trailController;
	
	@BeforeEach
	public void init() {
		this.trailController = new TrailController(trailService);
	}
	
	// Primeiro ponto
		@Test
		void returnsEmptyWhenListTrailsDoesNotExistInRepository() {
			List<Trail> trail = new ArrayList<Trail>();
			when(trailService.findAll()).thenReturn(trail);
			assertTrue(trail.isEmpty());
		}

//		//Segundo ponto
//		@Test
//		void returnListTrailWhenIdExistsInRepository() {
//			List<TrailModel> trail = trailWithContent();
//			when(trailRepository.findAll()).thenReturn(trail);
//			assertFalse(trail.isEmpty());
//			assertTrue(trail.size() == 3);
//			for (int i = 0; i < trail.size(); i++) {
//				assertTrue(trail.get(i).getId() == i + 1);
//			}
//		}
//		
//		//Terceiro ponto
//		@Test
//		void SearchForTrackWithId5AndReturnTrackOfId5WithNoContent() {
//			final Long id = Long.valueOf(5);
//			
//			when(trailRepository.findById(id)).thenReturn(Optional.ofNullable(TrailModel.builder().id(id).build()));
//			Optional<Trail> trail = trailService.findById(id);
//		
//			assertTrue(trail.isPresent());
//			assertEquals(id, trail.get().getId());
//		}
//
//		// Quarto ponto
//		@Test
//		void returnTrailWhenIdExistsInRepository() {
//			final Long id = Long.valueOf(3);
//			Content content1 = new Content(Long.valueOf(1),"java","java.com", "java basico", "javaimagem.com", "java");
//			Content content2 = new Content(Long.valueOf(2),"java2","java.com2", "java basico2", "javaimagem.com2", "java2");
//			List<Content> contents = new ArrayList<Content>();
//			contents.add(content1);
//			contents.add(content2);
//			
//			when(trailRepository.findById(id)).thenReturn(Optional.ofNullable(TrailModel.builder().id(id).build()));
//			Optional<Trail> trail = trailService.findById(id);
//			trail.get().setContents(contents);
//		
//			assertTrue(trail.isPresent());
//			assertEquals(id, trail.get().getId());
//			assertEquals(2, trail.get().getContents().size());
//		}
//
//		//Ponto 5
//		@Test
//		void returnsEmptyWhenIdDoesNotExistInRepository() {
//			final Long id = Long.valueOf(7);
//			Optional<Trail> trail = trailService.findById(id);
//			verify(trailRepository).findById(id);
//			assertFalse(trail.isPresent());
//			assertTrue(trail.isEmpty());
//		}
//	
//	@Test
//	void returnTrailWhenIdExistsInService() {
//		final Long id = Long.valueOf(1);
//		List<Content> contents = new ArrayList<Content>();
//		Trail trail = new Trail(id, contents, "descricao", "trilha.com", "trilha princial", "trilha");
//		when(trailService.findById(id)).thenReturn(Optional.ofNullable(trail));
//		assertTrue(trail != null);
//		assertEquals(id, trail.getId());
//	}
//
//	@Test
//	void returnsEmptyWhenIdDoesNotExistInService() {
//		final Long id = Long.valueOf(1);
//		Optional<Trail> trail = trailService.findById(id);
//		verify(trailService).findById(id);
//		assertFalse(trail.isPresent());
//	}
}
